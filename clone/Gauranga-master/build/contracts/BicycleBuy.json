{
  "contractName": "BicycleBuy",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bicycles",
      "outputs": [
        {
          "name": "Model",
          "type": "string"
        },
        {
          "name": "Color",
          "type": "string"
        },
        {
          "name": "Owner",
          "type": "address"
        },
        {
          "name": "upvoteCount",
          "type": "uint32"
        },
        {
          "name": "downvoteCount",
          "type": "uint32"
        },
        {
          "name": "boughtAtTime",
          "type": "uint16"
        },
        {
          "name": "price",
          "type": "uint256"
        },
        {
          "name": "state",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x20b6f13d"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x365b98b2"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_bicycleId",
          "type": "uint256"
        },
        {
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "putForSale",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x3cd76be2"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "soldBicycles",
      "outputs": [
        {
          "name": "Model",
          "type": "string"
        },
        {
          "name": "Color",
          "type": "string"
        },
        {
          "name": "Owner",
          "type": "address"
        },
        {
          "name": "upvoteCount",
          "type": "uint32"
        },
        {
          "name": "downvoteCount",
          "type": "uint32"
        },
        {
          "name": "boughtAtTime",
          "type": "uint16"
        },
        {
          "name": "price",
          "type": "uint256"
        },
        {
          "name": "state",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x3e2b3060"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x715018a6"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "ownerBicycleCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x86eb2087"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x8da5cb5b"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x8f32d59b"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_bicycleId",
          "type": "uint256"
        }
      ],
      "name": "upvoteBicycle",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x96a588be"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "displayBicyclesForSale",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xa4b23b21"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bicycleToOwner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xb9ca9f38"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_bicycleId",
          "type": "uint256"
        }
      ],
      "name": "downvoteBicycle",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xc10be00b"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_Model",
          "type": "string"
        },
        {
          "name": "_Color",
          "type": "string"
        }
      ],
      "name": "registerBicycle",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xc7a94931"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bicycleForSale",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0xca6d8ee0"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xf2fde38b"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "Model",
          "type": "string"
        },
        {
          "indexed": false,
          "name": "Color",
          "type": "string"
        }
      ],
      "name": "NewBicycle",
      "type": "event",
      "signature": "0xaa0217ba93f92c0171284bdaf11d170f0ba69ed14f4656509c31d0e71055c557"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event",
      "signature": "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_bicycleId",
          "type": "uint256"
        }
      ],
      "name": "buyBicycle",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function",
      "signature": "0xbc566225"
    }
  ],
  "bytecode": "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3611eed806100cf6000396000f3fe6080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806320b6f13d146100eb578063365b98b21461028f5780633cd76be21461030a5780633e2b30601461034f578063715018a6146104f357806386eb20871461050a5780638da5cb5b1461056f5780638f32d59b146105c657806396a588be146105f5578063a4b23b2114610630578063b9ca9f381461069c578063bc56622514610717578063c10be00b14610745578063c7a9493114610780578063ca6d8ee0146108df578063f2fde38b1461092e575b600080fd5b3480156100f757600080fd5b506101246004803603602081101561010e57600080fd5b810190808035906020019092919050505061097f565b6040518080602001806020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018863ffffffff1663ffffffff1681526020018763ffffffff1663ffffffff1681526020018661ffff1661ffff1681526020018581526020018460038111156101a657fe5b60ff16815260200183810383528b818151815260200191508051906020019080838360005b838110156101e65780820151818401526020810190506101cb565b50505050905090810190601f1680156102135780820380516001836020036101000a031916815260200191505b5083810382528a818151815260200191508051906020019080838360005b8381101561024c578082015181840152602081019050610231565b50505050905090810190601f1680156102795780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34801561029b57600080fd5b506102c8600480360360208110156102b257600080fd5b8101908080359060200190929190505050610b61565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031657600080fd5b5061034d6004803603604081101561032d57600080fd5b810190808035906020019092919080359060200190929190505050610b9f565b005b34801561035b57600080fd5b506103886004803603602081101561037257600080fd5b8101908080359060200190929190505050610cf6565b6040518080602001806020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018863ffffffff1663ffffffff1681526020018763ffffffff1663ffffffff1681526020018661ffff1661ffff16815260200185815260200184600381111561040a57fe5b60ff16815260200183810383528b818151815260200191508051906020019080838360005b8381101561044a57808201518184015260208101905061042f565b50505050905090810190601f1680156104775780820380516001836020036101000a031916815260200191505b5083810382528a818151815260200191508051906020019080838360005b838110156104b0578082015181840152602081019050610495565b50505050905090810190601f1680156104dd5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b3480156104ff57600080fd5b50610508610ed8565b005b34801561051657600080fd5b506105596004803603602081101561052d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611013565b6040518082815260200191505060405180910390f35b34801561057b57600080fd5b5061058461102b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d257600080fd5b506105db611054565b604051808215151515815260200191505060405180910390f35b34801561060157600080fd5b5061062e6004803603602081101561061857600080fd5b81019080803590602001909291905050506110ab565b005b34801561063c57600080fd5b50610645611325565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561068857808201518184015260208101905061066d565b505050509050019250505060405180910390f35b3480156106a857600080fd5b506106d5600480360360208110156106bf57600080fd5b810190808035906020019092919050505061137d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107436004803603602081101561072d57600080fd5b81019080803590602001909291905050506113b0565b005b34801561075157600080fd5b5061077e6004803603602081101561076857600080fd5b8101908080359060200190929190505050611604565b005b34801561078c57600080fd5b506108dd600480360360408110156107a357600080fd5b81019080803590602001906401000000008111156107c057600080fd5b8201836020820111156107d257600080fd5b803590602001918460018302840111640100000000831117156107f457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561085757600080fd5b82018360208201111561086957600080fd5b8035906020019184600183028401116401000000008311171561088b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061187e565b005b3480156108eb57600080fd5b506109186004803603602081101561090257600080fd5b810190808035906020019092919050505061188c565b6040518082815260200191505060405180910390f35b34801561093a57600080fd5b5061097d6004803603602081101561095157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118af565b005b60018181548110151561098e57fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a3a5780601f10610a0f57610100808354040283529160200191610a3a565b820191906000526020600020905b815481529060010190602001808311610a1d57829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff16908060020160189054906101000a900463ffffffff169080600201601c9054906101000a900461ffff16908060030154908060040160009054906101000a900460ff16905088565b600481815481101515610b7057fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f74206f776e6572206f662062696379636c6521000000000000000000000081525060200191505060405180910390fd5b6000600183815481101515610c8657fe5b9060005260206000209060050201905060018160040160006101000a81548160ff02191690836003811115610cb757fe5b02179055508181600301819055506006839080600181540180825580915050906001820390600052602060002001600090919290919091505550505050565b600781815481101515610d0557fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610db15780601f10610d8657610100808354040283529160200191610db1565b820191906000526020600020905b815481529060010190602001808311610d9457829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e4f5780601f10610e2457610100808354040283529160200191610e4f565b820191906000526020600020905b815481529060010190602001808311610e3257829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff16908060020160189054906101000a900463ffffffff169080600201601c9054906101000a900461ffff16908060030154908060040160009054906101000a900460ff16905088565b610ee0611054565b1515610f54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f74206f776e6572210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60036020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b80600080905060008090505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156111715782600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561114e57fe5b9060005260206000200154141561116457611171565b80806001019150506110b7565b506000811415156111ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f416c726561647920726576696577207375626d6974746564210000000000000081525060200191505060405180910390fd5b6002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515156112c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f776e65722063616e206e6f742072657669657721000000000000000000000081525060200191505060405180910390fd5b60006001848154811015156112d257fe5b9060005260206000209060050201905080600201601481819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505050505050565b6060600680548060200260200160405190810160405280929190818152602001828054801561137357602002820191906000526020600020905b81548152602001906001019080831161135f575b5050505050905090565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160038111156113bd57fe5b6001828154811015156113cc57fe5b906000526020600020906005020160040160009054906101000a900460ff1660038111156113f657fe5b14151561146b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536f7272792c206e6f7420617661696c61626c6520666f722073616c6521000081525060200191505060405180910390fd5b60018181548110151561147a57fe5b9060005260206000209060050201600301543410151515611503576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e73756666696369656e742066756e64207472616e7366657221000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc60018381548110151561152c57fe5b90600052602060002090600502016003015434039081150290604051600060405180830381858888f1935050505015801561156b573d6000803e3d6000fd5b50600060018281548110151561157d57fe5b9060005260206000209060050201905060038160040160006101000a81548160ff021916908360038111156115ae57fe5b021790555060008160030181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b80600080905060008090505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156116ca5782600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156116a757fe5b906000526020600020015414156116bd576116ca565b8080600101915050611610565b50600081141515611743576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f416c726561647920726576696577207375626d6974746564210000000000000081525060200191505060405180910390fd5b6002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561181a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f776e65722063616e206e6f742072657669657721000000000000000000000081525060200191505060405180910390fd5b600060018481548110151561182b57fe5b9060005260206000209060050201905080600201601881819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505050505050565b6118888282611937565b5050565b60068181548110151561189b57fe5b906000526020600020016000915090505481565b6118b7611054565b151561192b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f74206f776e6572210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b61193481611cb9565b50565b6000600180610100604051908101604052808681526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600061ffff16815260200160008152602001600060038111156119aa57fe5b8152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000190805190602001906119f4929190611e1c565b506020820151816001019080519060200190611a11929190611e1c565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548163ffffffff021916908363ffffffff16021790555060808201518160020160186101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600201601c6101000a81548161ffff021916908361ffff16021790555060c0820151816003015560e08201518160040160006101000a81548160ff02191690836003811115611af857fe5b02179055505050039050336002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055507faa0217ba93f92c0171284bdaf11d170f0ba69ed14f4656509c31d0e71055c557818484604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611c11578082015181840152602081019050611bf6565b50505050905090810190601f168015611c3e5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611c77578082015181840152602081019050611c5c565b50505050905090810190601f168015611ca45780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611d5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6e65774f776e6572203d3d20616464726573732830290000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e5d57805160ff1916838001178555611e8b565b82800160010185558215611e8b579182015b82811115611e8a578251825591602001919060010190611e6f565b5b509050611e989190611e9c565b5090565b611ebe91905b80821115611eba576000816000905550600101611ea2565b5090565b9056fea165627a7a72305820666ada4a723034393b8834fccc5a63381ae52c62315ae53fcbb170439823e9700029",
  "deployedBytecode": "0x6080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806320b6f13d146100eb578063365b98b21461028f5780633cd76be21461030a5780633e2b30601461034f578063715018a6146104f357806386eb20871461050a5780638da5cb5b1461056f5780638f32d59b146105c657806396a588be146105f5578063a4b23b2114610630578063b9ca9f381461069c578063bc56622514610717578063c10be00b14610745578063c7a9493114610780578063ca6d8ee0146108df578063f2fde38b1461092e575b600080fd5b3480156100f757600080fd5b506101246004803603602081101561010e57600080fd5b810190808035906020019092919050505061097f565b6040518080602001806020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018863ffffffff1663ffffffff1681526020018763ffffffff1663ffffffff1681526020018661ffff1661ffff1681526020018581526020018460038111156101a657fe5b60ff16815260200183810383528b818151815260200191508051906020019080838360005b838110156101e65780820151818401526020810190506101cb565b50505050905090810190601f1680156102135780820380516001836020036101000a031916815260200191505b5083810382528a818151815260200191508051906020019080838360005b8381101561024c578082015181840152602081019050610231565b50505050905090810190601f1680156102795780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34801561029b57600080fd5b506102c8600480360360208110156102b257600080fd5b8101908080359060200190929190505050610b61565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031657600080fd5b5061034d6004803603604081101561032d57600080fd5b810190808035906020019092919080359060200190929190505050610b9f565b005b34801561035b57600080fd5b506103886004803603602081101561037257600080fd5b8101908080359060200190929190505050610cf6565b6040518080602001806020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018863ffffffff1663ffffffff1681526020018763ffffffff1663ffffffff1681526020018661ffff1661ffff16815260200185815260200184600381111561040a57fe5b60ff16815260200183810383528b818151815260200191508051906020019080838360005b8381101561044a57808201518184015260208101905061042f565b50505050905090810190601f1680156104775780820380516001836020036101000a031916815260200191505b5083810382528a818151815260200191508051906020019080838360005b838110156104b0578082015181840152602081019050610495565b50505050905090810190601f1680156104dd5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b3480156104ff57600080fd5b50610508610ed8565b005b34801561051657600080fd5b506105596004803603602081101561052d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611013565b6040518082815260200191505060405180910390f35b34801561057b57600080fd5b5061058461102b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d257600080fd5b506105db611054565b604051808215151515815260200191505060405180910390f35b34801561060157600080fd5b5061062e6004803603602081101561061857600080fd5b81019080803590602001909291905050506110ab565b005b34801561063c57600080fd5b50610645611325565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561068857808201518184015260208101905061066d565b505050509050019250505060405180910390f35b3480156106a857600080fd5b506106d5600480360360208110156106bf57600080fd5b810190808035906020019092919050505061137d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107436004803603602081101561072d57600080fd5b81019080803590602001909291905050506113b0565b005b34801561075157600080fd5b5061077e6004803603602081101561076857600080fd5b8101908080359060200190929190505050611604565b005b34801561078c57600080fd5b506108dd600480360360408110156107a357600080fd5b81019080803590602001906401000000008111156107c057600080fd5b8201836020820111156107d257600080fd5b803590602001918460018302840111640100000000831117156107f457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561085757600080fd5b82018360208201111561086957600080fd5b8035906020019184600183028401116401000000008311171561088b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061187e565b005b3480156108eb57600080fd5b506109186004803603602081101561090257600080fd5b810190808035906020019092919050505061188c565b6040518082815260200191505060405180910390f35b34801561093a57600080fd5b5061097d6004803603602081101561095157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118af565b005b60018181548110151561098e57fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a3a5780601f10610a0f57610100808354040283529160200191610a3a565b820191906000526020600020905b815481529060010190602001808311610a1d57829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff16908060020160189054906101000a900463ffffffff169080600201601c9054906101000a900461ffff16908060030154908060040160009054906101000a900460ff16905088565b600481815481101515610b7057fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4e6f74206f776e6572206f662062696379636c6521000000000000000000000081525060200191505060405180910390fd5b6000600183815481101515610c8657fe5b9060005260206000209060050201905060018160040160006101000a81548160ff02191690836003811115610cb757fe5b02179055508181600301819055506006839080600181540180825580915050906001820390600052602060002001600090919290919091505550505050565b600781815481101515610d0557fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610db15780601f10610d8657610100808354040283529160200191610db1565b820191906000526020600020905b815481529060010190602001808311610d9457829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e4f5780601f10610e2457610100808354040283529160200191610e4f565b820191906000526020600020905b815481529060010190602001808311610e3257829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff16908060020160189054906101000a900463ffffffff169080600201601c9054906101000a900461ffff16908060030154908060040160009054906101000a900460ff16905088565b610ee0611054565b1515610f54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f74206f776e6572210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60036020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b80600080905060008090505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156111715782600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561114e57fe5b9060005260206000200154141561116457611171565b80806001019150506110b7565b506000811415156111ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f416c726561647920726576696577207375626d6974746564210000000000000081525060200191505060405180910390fd5b6002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515156112c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f776e65722063616e206e6f742072657669657721000000000000000000000081525060200191505060405180910390fd5b60006001848154811015156112d257fe5b9060005260206000209060050201905080600201601481819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505050505050565b6060600680548060200260200160405190810160405280929190818152602001828054801561137357602002820191906000526020600020905b81548152602001906001019080831161135f575b5050505050905090565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160038111156113bd57fe5b6001828154811015156113cc57fe5b906000526020600020906005020160040160009054906101000a900460ff1660038111156113f657fe5b14151561146b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536f7272792c206e6f7420617661696c61626c6520666f722073616c6521000081525060200191505060405180910390fd5b60018181548110151561147a57fe5b9060005260206000209060050201600301543410151515611503576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e73756666696369656e742066756e64207472616e7366657221000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc60018381548110151561152c57fe5b90600052602060002090600502016003015434039081150290604051600060405180830381858888f1935050505015801561156b573d6000803e3d6000fd5b50600060018281548110151561157d57fe5b9060005260206000209060050201905060038160040160006101000a81548160ff021916908360038111156115ae57fe5b021790555060008160030181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b80600080905060008090505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156116ca5782600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156116a757fe5b906000526020600020015414156116bd576116ca565b8080600101915050611610565b50600081141515611743576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f416c726561647920726576696577207375626d6974746564210000000000000081525060200191505060405180910390fd5b6002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561181a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4f776e65722063616e206e6f742072657669657721000000000000000000000081525060200191505060405180910390fd5b600060018481548110151561182b57fe5b9060005260206000209060050201905080600201601881819054906101000a900463ffffffff168092919060010191906101000a81548163ffffffff021916908363ffffffff1602179055505050505050565b6118888282611937565b5050565b60068181548110151561189b57fe5b906000526020600020016000915090505481565b6118b7611054565b151561192b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f4e6f74206f776e6572210000000000000000000000000000000000000000000081525060200191505060405180910390fd5b61193481611cb9565b50565b6000600180610100604051908101604052808681526020018581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600061ffff16815260200160008152602001600060038111156119aa57fe5b8152509080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000190805190602001906119f4929190611e1c565b506020820151816001019080519060200190611a11929190611e1c565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548163ffffffff021916908363ffffffff16021790555060808201518160020160186101000a81548163ffffffff021916908363ffffffff16021790555060a082015181600201601c6101000a81548161ffff021916908361ffff16021790555060c0820151816003015560e08201518160040160006101000a81548160ff02191690836003811115611af857fe5b02179055505050039050336002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055507faa0217ba93f92c0171284bdaf11d170f0ba69ed14f4656509c31d0e71055c557818484604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611c11578082015181840152602081019050611bf6565b50505050905090810190601f168015611c3e5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611c77578082015181840152602081019050611c5c565b50505050905090810190601f168015611ca45780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611d5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6e65774f776e6572203d3d20616464726573732830290000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611e5d57805160ff1916838001178555611e8b565b82800160010185558215611e8b579182015b82811115611e8a578251825591602001919060010190611e6f565b5b509050611e989190611e9c565b5090565b611ebe91905b80821115611eba576000816000905550600101611ea2565b5090565b9056fea165627a7a72305820666ada4a723034393b8834fccc5a63381ae52c62315ae53fcbb170439823e9700029",
  "sourceMap": "54:1172:0:-;;;522:10:6;513:6;;:19;;;;;;;;;;;;;;;;;;580:6;;;;;;;;;;;547:40;;576:1;547:40;;;;;;;;;;;;54:1172:0;;;;;;",
  "deployedSourceMap": "54:1172:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;444:25:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;444:25:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;444:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;444:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;444:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1044:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1044:22:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1044:22:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;206:407:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;206:407:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;206:407:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;92:29:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;92:29:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;92:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;92:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;92:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1316:137:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1316:137:6;;;;;;528:49:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;528:49:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;528:49:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;649:76:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;649:76:6;;;;;;;;;;;;;;;;;;;;;;;;;;;966:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;966:89:6;;;;;;;;;;;;;;;;;;;;;;;;;;;549:259:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;549:259:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;549:259:5;;;;;;;;;;;;;;;;;;;;619:109:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;619:109:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;619:109:3;;;;;;;;;;;;;;;;;476:46:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;476:46:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;476:46:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;303:746:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;303:746:0;;;;;;;;;;;;;;;;;;;;814:276:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;814:276:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;814:276:5;;;;;;;;;;;;;;;;;;;;912:125:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;912:125:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;912:125:1;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;912:125:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;912:125:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;912:125:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;912:125:1;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;912:125:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;912:125:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;912:125:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;912:125:1;;;;;;;;;;;;;;;;;;171:28:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;171:28:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;171:28:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1613:107:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1613:107:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1613:107:6;;;;;;;;;;;;;;;;;;;;;;444:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1044:22::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;206:407:3:-;295:14;:26;310:10;295:26;;;;;;;;;;;;;;;;;;;;;281:40;;:10;:40;;;273:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;357:25;385:8;394:10;385:20;;;;;;;;;;;;;;;;;;;;357:48;;433:13;415:9;:15;;;:31;;;;;;;;;;;;;;;;;;;;;;;;474:6;456:9;:15;;:24;;;;490:14;510:10;490:31;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;490:31:3;;;;;;;;;;;;;;;;;;;;;;206:407;;;:::o;92:29:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1316:137:6:-;844:9;:7;:9::i;:::-;836:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1414:1;1377:40;;1398:6;;;;;;;;;;;1377:40;;;;;;;;;;;;1444:1;1427:6;;:19;;;;;;;;;;;;;;;;;;1316:137::o;528:49:1:-;;;;;;;;;;;;;;;;;:::o;649:76:6:-;686:7;712:6;;;;;;;;;;;705:13;;649:76;:::o;966:89::-;1005:4;1042:6;;;;;;;;;;;1028:20;;:10;:20;;;1021:27;;966:89;:::o;549:259:5:-;608:10;243:9;255:1;243:13;;270:6;279:1;270:10;;266:203;286:17;:29;304:10;286:29;;;;;;;;;;;;;;;:36;;;;282:1;:40;266:203;;;382:10;346:17;:29;364:10;346:29;;;;;;;;;;;;;;;376:1;346:32;;;;;;;;;;;;;;;;;;:46;343:116;;;439:5;;343:116;324:3;;;;;;;266:203;;;;494:1;486:4;:9;478:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;652:14;:26;667:10;652:26;;;;;;;;;;;;;;;;;;;;;638:40;;:10;:40;;;;630:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;716:27;746:8;755:10;746:20;;;;;;;;;;;;;;;;;;;;716:50;;776:11;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;535:1;549:259;;;:::o;619:109:3:-;675:13;707:14;700:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;619:109;:::o;476:46:1:-;;;;;;;;;;;;;;;;;;;;;;:::o;303:746:0:-;405:13;375:43;;;;;;;;:8;384:10;375:20;;;;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:43;;;;;;;;;367:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;484:8;493:10;484:20;;;;;;;;;;;;;;;;;;;;:26;;;471:9;:39;;463:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;552:10;:19;;:59;584:8;593:10;584:20;;;;;;;;;;;;;;;;;;;;:26;;;572:9;:38;552:59;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;552:59:0;873:29;905:8;914:10;905:20;;;;;;;;;;;;;;;;;;;;873:52;;957:10;935:13;:19;;;:32;;;;;;;;;;;;;;;;;;;;;;;;999:1;977:13;:19;;:23;;;;1032:10;1010:13;:19;;;:32;;;;;;;;;;;;;;;;;;303:746;;:::o;814:276:5:-;875:10;243:9;255:1;243:13;;270:6;279:1;270:10;;266:203;286:17;:29;304:10;286:29;;;;;;;;;;;;;;;:36;;;;282:1;:40;266:203;;;382:10;346:17;:29;364:10;346:29;;;;;;;;;;;;;;;376:1;346:32;;;;;;;;;;;;;;;;;;:46;343:116;;;439:5;;343:116;324:3;;;;;;;266:203;;;;494:1;486:4;:9;478:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;932:14;:26;947:10;932:26;;;;;;;;;;;;;;;;;;;;;918:40;;:10;:40;;;;910:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;996:27;1026:8;1035:10;1026:20;;;;;;;;;;;;;;;;;;;;996:50;;1056:11;:25;;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;535:1;814:276;;;:::o;912:125:1:-;998:32;1015:6;1023;998:16;:32::i;:::-;912:125;;:::o;171:28:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1613:107:6:-;844:9;:7;:9::i;:::-;836:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1685:28;1704:8;1685:18;:28::i;:::-;1613:107;:::o;589:317:1:-;677:7;770:1;687:8;701:65;;;;;;;;;709:6;701:65;;;;717:6;701:65;;;;725:10;701:65;;;;;;737:1;701:65;;;;;;740:1;701:65;;;;;;743:1;701:65;;;;;;746:1;701:65;;;;749:16;701:65;;;;;;;;;;;687:80;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;687:80:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:84;677:94;;803:10;782:14;:18;797:2;782:18;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;823:17;:29;841:10;823:29;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;869:30;880:2;884:6;892;869:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;869:30:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;869:30:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;589:317;;;:::o;1853:209:6:-;1946:1;1926:22;;:8;:22;;;;1918:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2019:8;1990:38;;2011:6;;;;;;;;;;;1990:38;;;;;;;;;;;;2047:8;2038:6;;:17;;;;;;;;;;;;;;;;;;1853:209;:::o;54:1172:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./biketrade01.sol\";\n\ncontract BicycleBuy is ForSale {\n\n    Bicycle[] public soldBicycles;\n    /*\n    modifier onlyAfter(uint _bicycleId) {\n        require(now >= bicycles[_bicycleId].boughtAtTime + 1 days, \"Waiting for transfer of asset!\");\n        _;\n    }\n    */\n\n    function buyBicycle(uint _bicycleId) external payable {\n        require(bicycles[_bicycleId].state == State.FORSALE, \"Sorry, not available for sale!\");\n        require(msg.value >= bicycles[_bicycleId].price, \"Insufficient fund transfer!\");\n        msg.sender.transfer(msg.value - bicycles[_bicycleId].price);\n\n        //bicycles[_bicycleId].state = State.HOLD;\n        //bicycles[_bicycleId].boughtAtTime = uint16(now);   // incomplete logic\n        \n        //address _owner = bicycleToOwner[_bicycleId];\n        //_owner.transfer(bicycles[_bicycleId].price);\n        Bicycle storage targetBicycle = bicycles[_bicycleId];\n        targetBicycle.state = State.SOLD;\n        targetBicycle.price = 0;\n        targetBicycle.Owner = msg.sender;\n    }\n\n    /*\n    function delivered(uint _bicycleId) external payable onlyAfter(_bicycleId) {   //incomplete function\n        //require(msg.sender == buyer);\n        \n    }\n    */\n}",
  "sourcePath": "/home/anshu1/dapps/MetroBiki/contracts/BicycleBuy.sol",
  "ast": {
    "absolutePath": "/home/anshu1/dapps/MetroBiki/contracts/BicycleBuy.sol",
    "exportedSymbols": {
      "BicycleBuy": [
        76
      ]
    },
    "id": 77,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "absolutePath": "/home/anshu1/dapps/MetroBiki/contracts/biketrade01.sol",
        "file": "./biketrade01.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 77,
        "sourceUnit": 307,
        "src": "25:27:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "ForSale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 306,
              "src": "77:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ForSale_$306",
                "typeString": "contract ForSale"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "77:7:0"
          }
        ],
        "contractDependencies": [
          188,
          306,
          427,
          538
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 76,
        "linearizedBaseContracts": [
          76,
          306,
          427,
          188,
          538
        ],
        "name": "BicycleBuy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 7,
            "name": "soldBicycles",
            "nodeType": "VariableDeclaration",
            "scope": 76,
            "src": "92:29:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage",
              "typeString": "struct BicycleRegister.Bicycle[]"
            },
            "typeName": {
              "baseType": {
                "contractScope": null,
                "id": 5,
                "name": "Bicycle",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 113,
                "src": "92:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                  "typeString": "struct BicycleRegister.Bicycle"
                }
              },
              "id": 6,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "92:9:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage_ptr",
                "typeString": "struct BicycleRegister.Bicycle[]"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 74,
              "nodeType": "Block",
              "src": "357:692:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_enum$_State_$94",
                          "typeString": "enum BicycleRegister.State"
                        },
                        "id": 19,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 13,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 116,
                              "src": "375:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 15,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 14,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9,
                              "src": "384:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "375:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$113_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 16,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "state",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 112,
                          "src": "375:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$94",
                            "typeString": "enum BicycleRegister.State"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 17,
                            "name": "State",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 94,
                            "src": "405:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_State_$94_$",
                              "typeString": "type(enum BicycleRegister.State)"
                            }
                          },
                          "id": 18,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "FORSALE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "405:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$94",
                            "typeString": "enum BicycleRegister.State"
                          }
                        },
                        "src": "375:43:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "536f7272792c206e6f7420617661696c61626c6520666f722073616c6521",
                        "id": 20,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "420:32:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_97e67f8654d041abb65236fe78e3e2c8140c0f8c1721bcd9ebe6ac8f83f0ea47",
                          "typeString": "literal_string \"Sorry, not available for sale!\""
                        },
                        "value": "Sorry, not available for sale!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_97e67f8654d041abb65236fe78e3e2c8140c0f8c1721bcd9ebe6ac8f83f0ea47",
                          "typeString": "literal_string \"Sorry, not available for sale!\""
                        }
                      ],
                      "id": 12,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        570,
                        571
                      ],
                      "referencedDeclaration": 571,
                      "src": "367:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 21,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "367:86:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 22,
                  "nodeType": "ExpressionStatement",
                  "src": "367:86:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 24,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 567,
                            "src": "471:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 25,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "471:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 26,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 116,
                              "src": "484:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 28,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 27,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9,
                              "src": "493:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "484:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$113_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 29,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "price",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 110,
                          "src": "484:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "471:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "496e73756666696369656e742066756e64207472616e7366657221",
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "512:29:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7ec089c10f0d6b660bfa2a2ac8457586ec1b7c3116988c8944a187af14e191ba",
                          "typeString": "literal_string \"Insufficient fund transfer!\""
                        },
                        "value": "Insufficient fund transfer!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7ec089c10f0d6b660bfa2a2ac8457586ec1b7c3116988c8944a187af14e191ba",
                          "typeString": "literal_string \"Insufficient fund transfer!\""
                        }
                      ],
                      "id": 23,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        570,
                        571
                      ],
                      "referencedDeclaration": 571,
                      "src": "463:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 32,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "463:79:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33,
                  "nodeType": "ExpressionStatement",
                  "src": "463:79:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 45,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 39,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 567,
                            "src": "572:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 40,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "572:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 41,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 116,
                              "src": "584:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 43,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 42,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9,
                              "src": "593:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "584:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$113_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 44,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "price",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 110,
                          "src": "584:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "572:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 34,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 567,
                          "src": "552:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 37,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "552:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 38,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "552:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 46,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "552:59:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 47,
                  "nodeType": "ExpressionStatement",
                  "src": "552:59:0"
                },
                {
                  "assignments": [
                    49
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 49,
                      "name": "targetBicycle",
                      "nodeType": "VariableDeclaration",
                      "scope": 74,
                      "src": "873:29:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                        "typeString": "struct BicycleRegister.Bicycle"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 48,
                        "name": "Bicycle",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 113,
                        "src": "873:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 53,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 50,
                      "name": "bicycles",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 116,
                      "src": "905:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage",
                        "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                      }
                    },
                    "id": 52,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 51,
                      "name": "_bicycleId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9,
                      "src": "914:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "905:20:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Bicycle_$113_storage",
                      "typeString": "struct BicycleRegister.Bicycle storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "873:52:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 59,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 54,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 49,
                        "src": "935:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 56,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "state",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 112,
                      "src": "935:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$94",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 57,
                        "name": "State",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 94,
                        "src": "957:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_State_$94_$",
                          "typeString": "type(enum BicycleRegister.State)"
                        }
                      },
                      "id": 58,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "SOLD",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "957:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$94",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "src": "935:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$94",
                      "typeString": "enum BicycleRegister.State"
                    }
                  },
                  "id": 60,
                  "nodeType": "ExpressionStatement",
                  "src": "935:32:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 65,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 61,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 49,
                        "src": "977:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 63,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "price",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 110,
                      "src": "977:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 64,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "999:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "977:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 66,
                  "nodeType": "ExpressionStatement",
                  "src": "977:23:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 72,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 67,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 49,
                        "src": "1010:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 69,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "Owner",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 102,
                      "src": "1010:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 70,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 567,
                        "src": "1032:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 71,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1032:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1010:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 73,
                  "nodeType": "ExpressionStatement",
                  "src": "1010:32:0"
                }
              ]
            },
            "documentation": null,
            "id": 75,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "buyBicycle",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9,
                  "name": "_bicycleId",
                  "nodeType": "VariableDeclaration",
                  "scope": 75,
                  "src": "323:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "323:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "322:17:0"
            },
            "returnParameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "357:0:0"
            },
            "scope": 76,
            "src": "303:746:0",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 77,
        "src": "54:1172:0"
      }
    ],
    "src": "0:1226:0"
  },
  "legacyAST": {
    "absolutePath": "/home/anshu1/dapps/MetroBiki/contracts/BicycleBuy.sol",
    "exportedSymbols": {
      "BicycleBuy": [
        76
      ]
    },
    "id": 77,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:0"
      },
      {
        "absolutePath": "/home/anshu1/dapps/MetroBiki/contracts/biketrade01.sol",
        "file": "./biketrade01.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 77,
        "sourceUnit": 307,
        "src": "25:27:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "ForSale",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 306,
              "src": "77:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ForSale_$306",
                "typeString": "contract ForSale"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "77:7:0"
          }
        ],
        "contractDependencies": [
          188,
          306,
          427,
          538
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 76,
        "linearizedBaseContracts": [
          76,
          306,
          427,
          188,
          538
        ],
        "name": "BicycleBuy",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 7,
            "name": "soldBicycles",
            "nodeType": "VariableDeclaration",
            "scope": 76,
            "src": "92:29:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage",
              "typeString": "struct BicycleRegister.Bicycle[]"
            },
            "typeName": {
              "baseType": {
                "contractScope": null,
                "id": 5,
                "name": "Bicycle",
                "nodeType": "UserDefinedTypeName",
                "referencedDeclaration": 113,
                "src": "92:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                  "typeString": "struct BicycleRegister.Bicycle"
                }
              },
              "id": 6,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "92:9:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage_ptr",
                "typeString": "struct BicycleRegister.Bicycle[]"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 74,
              "nodeType": "Block",
              "src": "357:692:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_enum$_State_$94",
                          "typeString": "enum BicycleRegister.State"
                        },
                        "id": 19,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 13,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 116,
                              "src": "375:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 15,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 14,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9,
                              "src": "384:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "375:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$113_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 16,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "state",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 112,
                          "src": "375:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$94",
                            "typeString": "enum BicycleRegister.State"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 17,
                            "name": "State",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 94,
                            "src": "405:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_State_$94_$",
                              "typeString": "type(enum BicycleRegister.State)"
                            }
                          },
                          "id": 18,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "FORSALE",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "405:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$94",
                            "typeString": "enum BicycleRegister.State"
                          }
                        },
                        "src": "375:43:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "536f7272792c206e6f7420617661696c61626c6520666f722073616c6521",
                        "id": 20,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "420:32:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_97e67f8654d041abb65236fe78e3e2c8140c0f8c1721bcd9ebe6ac8f83f0ea47",
                          "typeString": "literal_string \"Sorry, not available for sale!\""
                        },
                        "value": "Sorry, not available for sale!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_97e67f8654d041abb65236fe78e3e2c8140c0f8c1721bcd9ebe6ac8f83f0ea47",
                          "typeString": "literal_string \"Sorry, not available for sale!\""
                        }
                      ],
                      "id": 12,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        570,
                        571
                      ],
                      "referencedDeclaration": 571,
                      "src": "367:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 21,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "367:86:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 22,
                  "nodeType": "ExpressionStatement",
                  "src": "367:86:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 24,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 567,
                            "src": "471:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 25,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "471:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 26,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 116,
                              "src": "484:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 28,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 27,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9,
                              "src": "493:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "484:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$113_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 29,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "price",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 110,
                          "src": "484:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "471:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "496e73756666696369656e742066756e64207472616e7366657221",
                        "id": 31,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "512:29:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7ec089c10f0d6b660bfa2a2ac8457586ec1b7c3116988c8944a187af14e191ba",
                          "typeString": "literal_string \"Insufficient fund transfer!\""
                        },
                        "value": "Insufficient fund transfer!"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7ec089c10f0d6b660bfa2a2ac8457586ec1b7c3116988c8944a187af14e191ba",
                          "typeString": "literal_string \"Insufficient fund transfer!\""
                        }
                      ],
                      "id": 23,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        570,
                        571
                      ],
                      "referencedDeclaration": 571,
                      "src": "463:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 32,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "463:79:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 33,
                  "nodeType": "ExpressionStatement",
                  "src": "463:79:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 45,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 39,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 567,
                            "src": "572:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 40,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "572:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 41,
                              "name": "bicycles",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 116,
                              "src": "584:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage",
                                "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                              }
                            },
                            "id": 43,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 42,
                              "name": "_bicycleId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 9,
                              "src": "593:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "584:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Bicycle_$113_storage",
                              "typeString": "struct BicycleRegister.Bicycle storage ref"
                            }
                          },
                          "id": 44,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "price",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 110,
                          "src": "584:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "572:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 34,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 567,
                          "src": "552:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 37,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "552:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 38,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "552:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 46,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "552:59:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 47,
                  "nodeType": "ExpressionStatement",
                  "src": "552:59:0"
                },
                {
                  "assignments": [
                    49
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 49,
                      "name": "targetBicycle",
                      "nodeType": "VariableDeclaration",
                      "scope": 74,
                      "src": "873:29:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                        "typeString": "struct BicycleRegister.Bicycle"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 48,
                        "name": "Bicycle",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 113,
                        "src": "873:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 53,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 50,
                      "name": "bicycles",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 116,
                      "src": "905:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Bicycle_$113_storage_$dyn_storage",
                        "typeString": "struct BicycleRegister.Bicycle storage ref[] storage ref"
                      }
                    },
                    "id": 52,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 51,
                      "name": "_bicycleId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9,
                      "src": "914:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "905:20:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Bicycle_$113_storage",
                      "typeString": "struct BicycleRegister.Bicycle storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "873:52:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 59,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 54,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 49,
                        "src": "935:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 56,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "state",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 112,
                      "src": "935:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$94",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 57,
                        "name": "State",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 94,
                        "src": "957:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_State_$94_$",
                          "typeString": "type(enum BicycleRegister.State)"
                        }
                      },
                      "id": 58,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "SOLD",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "957:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$94",
                        "typeString": "enum BicycleRegister.State"
                      }
                    },
                    "src": "935:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$94",
                      "typeString": "enum BicycleRegister.State"
                    }
                  },
                  "id": 60,
                  "nodeType": "ExpressionStatement",
                  "src": "935:32:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 65,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 61,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 49,
                        "src": "977:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 63,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "price",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 110,
                      "src": "977:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 64,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "999:1:0",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "977:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 66,
                  "nodeType": "ExpressionStatement",
                  "src": "977:23:0"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 72,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 67,
                        "name": "targetBicycle",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 49,
                        "src": "1010:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bicycle_$113_storage_ptr",
                          "typeString": "struct BicycleRegister.Bicycle storage pointer"
                        }
                      },
                      "id": 69,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "Owner",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 102,
                      "src": "1010:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 70,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 567,
                        "src": "1032:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 71,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1032:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1010:32:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 73,
                  "nodeType": "ExpressionStatement",
                  "src": "1010:32:0"
                }
              ]
            },
            "documentation": null,
            "id": 75,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "buyBicycle",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9,
                  "name": "_bicycleId",
                  "nodeType": "VariableDeclaration",
                  "scope": 75,
                  "src": "323:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 8,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "323:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "322:17:0"
            },
            "returnParameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "357:0:0"
            },
            "scope": 76,
            "src": "303:746:0",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 77,
        "src": "54:1172:0"
      }
    ],
    "src": "0:1226:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0x05F79eAcb99D2AD2d18828c8dCAcCC6Daa56f8c5",
      "transactionHash": "0xc526f42b31b0fe081d2238b5292e7b5c93e4c06b2fde4b3ec180b0c3ed9961a1"
    }
  },
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-03-16T13:18:14.924Z",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}